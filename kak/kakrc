set-option global autoinfo command|onkey|normal
set-option global scrolloff 5,10
set-option global ui_options ncurses_assistant=none terminal_assistant=none
set-option global tabstop 4
set-option global modelinefmt '{{mode_info}} {magenta}%val{bufname}{default} {{context_info}} {green}%val{client}{default}@{cyan}%val{session}{default} %val{cursor_line}/%val{buf_line_count}:%val{cursor_char_column} '

# clean selections and search highlight on Esc
map global normal <esc> '<space><semicolon>: rmhl global/search<ret>'

# highlight delimiter matches
add-highlighter global/match show-matching

# underline search matches
hook global RegisterModified '/' %{ add-highlighter -override global/search regex "%reg{/}" 0:+u }

# comment maps
map global normal '#'   ': comment-line<ret>'  -docstring "comment line"
map global normal <a-#> ': comment-block<ret>' -docstring "comment block"

# find non-ascii chars quickly
define-command non-ascii -docstring "search for non-ascii characters" %{
    set-register slash '[^\x00-\x7f]'
}

# tmux window management commands
define-command -docstring "vsplit [<commands>]: split tmux vertically" \
vsplit -params .. -command-completion %{
    tmux-terminal-horizontal kak -c %val{session} -e "%arg{@}"
}
define-command -docstring "split [<commands>]: split tmux horizontally" \
split -params .. -command-completion %{
    tmux-terminal-vertical kak -c %val{session} -e "%arg{@}"
}
define-command -docstring "tabnew [<commands>]: create new tmux window" \
tabnew -params .. -command-completion %{
    tmux-terminal-window kak -c %val{session} -e "%arg{@}"
}

# pylint
hook global WinSetOption filetype=python %{
    set window lintcmd %{ run() { pylint -d C0111,C0301,C0103,E1101 --msg-template='{path}:{line}:{column}: {category}: {msg_id}: {msg} ({symbol})' "$1" | awk -F: 'BEGIN { OFS=":" } { if (NF == 6) { $3 += 1; print } }'; } && run }
}

# find-edit command
define-command find-edit -params 1 -menu -shell-script-candidates %{ fd --type file || rg --files || find . -type f -not -regex '.*/\..*' } 'edit %arg(1)'
map global user f ': find-edit ' -docstring "find and edit file"

# unify next/prev
hook global BufOpenFifo '\*make\*' %{ alias global next make-next-error; alias global prev make-previous-error }
hook global BufOpenFifo '\*grep\*' %{ alias global next grep-next-match; alias global prev grep-previous-match }
hook global BufCreate '\*find\*' %{ alias global next find-next-match; alias global prev find-previous-match }
hook global BufOpenFifo '\*lint-output\*' %{ alias global next lint-next-message; alias global prev lint-previous-message }

map global user n     ': next<ret>' -docstring "next message"
map global user <a-n> ': prev<ret>' -docstring "previous message"

# add case insensitive flag
map global prompt <a-i> '<home>(?i)<end>' -docstring "case insensitive search"

# select all occurrences of selection set
map global normal <a-percent> '*%s<ret>' -docstring "select all occurrences of selection"

## self plugin settings
# options.kak
map global user c ': cursorline-toggle<ret>'   -docstring "toggle cursorline highlighting"
map global user l ': line-numbers-toggle<ret>' -docstring "toggle line-numbers"
map global user s ': whitespaces-toggle<ret>'  -docstring "toggle whitespace highlighting"
map global user w ': softwrap-toggle<ret>'     -docstring "toggle line soft wrap"
hook global WinCreate ^[^*]+$ %{ line-numbers-toggle; softwrap-toggle }

# clipboard.kak: clipboard sync on explicit yank
hook global NormalKey y clipboard-sync

# percent.kak
map global goto p '<esc>: percent<ret>' -docstring "buffer percentage"

# inc-dec.kak
declare-user-mode inc-dec
map global inc-dec a ': inc-dec %val{count} + 0<ret>' -docstring "increment by count"
map global inc-dec x ': inc-dec %val{count} - 0<ret>' -docstring "decrement by count"
map global inc-dec A ': inc-dec %val{count} + 1<ret>' -docstring "increment by count times selection index"
map global inc-dec X ': inc-dec %val{count} - 1<ret>' -docstring "decrement by count times selection index"
map global user m ': enter-user-mode inc-dec<ret>'       -docstring "enter inc-dec mode"
map global user M ': enter-user-mode -lock inc-dec<ret>' -docstring "enter inc-dec mode (lock)"

## remote plugin settings
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload

plug "caksoylar/kakoune-mysticaltutor" theme %{ colorscheme mysticaltutor }
plug "caksoylar/kakoune-smooth-scroll" config %{
    hook global WinCreate .* %{ hook -once window WinDisplay .* smooth-scroll-enable }
}
plug "occivink/kakoune-find"
plug "Delapouite/kakoune-registers"
plug "Screwtapello/kakoune-shellcheck" domain "gitlab.com"
plug "alexherbo2/out-of-view.kak" config %{
    set-option global modelinefmt "{yellow}%%opt{out_of_view_status_line}{default} %opt{modelinefmt}"
}

# enable lsp for filetypes, kak-lsp not managed by plug
hook global WinSetOption filetype=(rust|python|c|cpp) %{
    try %{
        evaluate-commands %sh{ kak-lsp --kakoune -s "$kak_session" }
        define-command lsp-restart %{ lsp-stop; lsp-start }
    }

    set-option window lsp_diagnostic_line_error_sign "!"
    set-option window lsp_diagnostic_line_warning_sign "?"
    set-face window DiagnosticError default+u
    set-face window DiagnosticWarning default+u

    lsp-enable-window
    lsp-auto-hover-enable

    map window user l ': enter-user-mode lsp<ret>' -docstring "LSP mode"
    map window normal <F9> ': tool lsp-diagnostics<ret>'
    map window goto r '<esc>: tool lsp-references<ret>' -docstring "references"

    hook global BufCreate '\*references\*' %{ alias global next lsp-references-next-match; alias global prev lsp-references-previous-match }
    hook global BufCreate '\*diagnostics\*' %{ def -override next "lsp-find-error --include-warnings"; def -override prev "lsp-find-error --previous --include-warnings" }

    hook -always global KakEnd .* lsp-exit
}

plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option global softtabstop 4
} config %{
    hook global WinSetOption filetype=(python|rust|markdown|kak|lisp|scheme|sh|fish|perl|yaml) expandtab
    hook global WinSetOption filetype=(makefile) noexpandtab
    hook global WinSetOption filetype=(c|cpp) smarttab
}

plug "Delapouite/kakoune-buffers" config %{
    map global normal <backspace>   ': enter-buffers-mode<ret>'            -docstring "enter buffers mode"
    map global normal <a-backspace> ': enter-user-mode -lock buffers<ret>' -docstring "enter buffers mode (lock)"
    hook global WinDisplay .* info-buffers
}

plug "chambln/kakoune-readline" config %{
    hook global WinCreate .* readline-enable
}

plug "alexherbo2/surround.kak" config %{
    map global normal "'" ': enter-user-mode surround<ret>' -docstring "enter surround mode"
}

plug "occivink/kakoune-vertical-selection" config %{
    map global normal ^     ': vertical-selection-down<ret>' -docstring "select matching pattern from the lines below"
    map global normal <a-^> ': vertical-selection-up<ret>'   -docstring "select matching pattern from the lines above"
}

plug "occivink/kakoune-expand" config %{
    map global normal + ": expand<ret>"
    set-option -add global expand_commands %{
        expand-impl %{ exec <a-i>p }
        # lower indent level
        expand-impl %{ exec '<a-;>k<a-a>i' }
        # expand back to pythonic "...:" lines
        expand-impl %{ exec '<a-i>i<a-:><a-;><a-?>^[^\n]+:<ret><a-;>' }
    }
}

plug "Screwtapello/kakoune-state-save" domain "gitlab.com" config %{
    hook global KakBegin .* %{
        state-save-reg-load colon
        state-save-reg-load pipe
        state-save-reg-load slash
    }
    hook global KakEnd .* %{
        state-save-reg-save colon
        state-save-reg-save pipe
        state-save-reg-save slash
    }
}
