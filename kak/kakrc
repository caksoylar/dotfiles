# set-option -add global autoinfo normal
set-option global scrolloff 3,3
set-option global ui_options ncurses_wheel_down_button=64
set-option global ui_options ncurses_assistant=off
set-option global tabstop 4

# highlight delimiter matches
add-highlighter global/match show-matching

# comment maps
map global normal '#'   ': comment-line<ret>'  -docstring "comment line"
map global normal <a-#> ': comment-block<ret>' -docstring "comment block"

# find non-ascii chars quickly
define-command non-ascii -docstring "search for non-ascii characters" %{
    set-register / '[^\x00-\x7f]'
    execute-keys n
}

# enable lsp for filetypes
hook global WinSetOption filetype=(rust|python|c|cpp) %{
    evaluate-commands %sh{ kak-lsp --kakoune -s "$kak_session" }
    lsp-enable-window
    lsp-auto-hover-enable
    map window normal <F9> ': tool lsp-diagnostics<ret>'
    map window goto r '<esc>: tool lsp-references<ret>'
}

# smarttab
hook global WinSetOption filetype=(python|rust|markdown|kak|lisp|scheme|sh|perl|yaml) expandtab
hook global WinSetOption filetype=(makefile) noexpandtab
hook global WinSetOption filetype=(c|cpp) smarttab
hook global ModuleLoaded smarttab %{
    set-option global softtabstop 4
}

colorscheme mysticaltutor

# cursorline highlighting
hook global -group cursorline NormalKey .* %{
    remove-highlighter window/cursorline
    add-highlighter window/cursorline line %val{cursor_line} CursorLine
}
define-command cursorline-disable %{
    remove-highlighter window/cursorline
    remove-hooks global cursorline
}

# tmux window management commands
define-command -docstring "vsplit [<commands>]: split tmux vertically" \
vsplit -params .. -command-completion %{
    tmux-terminal-horizontal kak -c %val{session} -e "%arg{@}"
}
define-command -docstring "split [<commands>]: split tmux horizontally" \
split -params .. -command-completion %{
    tmux-terminal-vertical kak -c %val{session} -e "%arg{@}"
}
define-command -docstring "tabnew [<commands>]: create new tmux window" \
tabnew -params .. -command-completion %{
    tmux-terminal-window kak -c %val{session} -e "%arg{@}"
}

# buffers
map global normal <backspace>   ': enter-buffers-mode<ret>'            -docstring "buffers…"
map global normal <a-backspace> ': enter-user-mode -lock buffers<ret>' -docstring "buffers (lock)…"
alias global bd delete-buffer
alias global bf buffer-first
alias global bl buffer-last
alias global bo buffer-only
alias global bo! buffer-only-force
hook global WinDisplay .* info-buffers

# readline
hook global WinCreate .* readline-enable

# kak-tree mode
declare-user-mode tree
map global tree h ': tree-select-previous-node<ret>'  -docstring "select previous"
map global tree l ': tree-select-next-node<ret>'      -docstring "select next"
map global tree k ': tree-select-parent-node<ret>'    -docstring "select parent"
map global tree j ': tree-select-children<ret>'       -docstring "select children"
map global tree f ': tree-select-first-child<ret>'    -docstring "select first child"
map global tree s ': tree-node-sexp<ret>'             -docstring "show info"

map global user t ': enter-user-mode tree<ret>'       -docstring "tree sitter…"
map global user T ': enter-user-mode -lock tree<ret>' -docstring "tree sitter… (lock)"

# surround
map global user s ': surround<ret>' -docstring 'enter surround mode'

# vertical-selection
map global normal ^     ': vertical-selection-down<ret>' -docstring "select matching pattern from the lines below"
map global normal <a-^> ': vertical-selection-up<ret>'   -docstring "select matching pattern from the lines above"

# state-save save command history
hook global KakBegin .* %{
    state-save-reg-load colon
    state-save-reg-load pipe
    state-save-reg-load slash
}
hook global KakEnd .* %{
    state-save-reg-save colon
    state-save-reg-save pipe
    state-save-reg-save slash
}

# set tools/jumpclient for tools
define-command -params .. -command-completion -docstring "create tool split" tool %{
    evaluate-commands %sh{
        if [ "$kak_client" != "main" ]; then
            echo "rename-client main; set global jumpclient main"
        fi
        if [ "${kak_quoted_client_list#*'tools'}" = "$kak_quoted_client_list" ]; then
            echo "split rename-client tools; set global toolsclient tools"
        fi
    }

    evaluate-commands -draft %arg{@}
}
