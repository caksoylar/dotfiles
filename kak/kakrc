# set-option global autoinfo command|onkey|normal
set-option global ui_options terminal_assistant=none #terminal_synchronized=yes
set-option global tabstop 4
set-option global modelinefmt '{{mode_info}} {magenta}%val{bufname}{default} {{context_info}} {green}%val{client}{default}@{cyan}%val{session}{default} %val{cursor_line}/%val{buf_line_count}:%val{cursor_char_column} (%val{selection_length}) '
set-option global grepcmd 'rg --vimgrep'

# clean selections and search highlight on Esc
map global normal <esc> ',<semicolon>:try "rmhl global/search"<ret>'

# repurpose visual mode keys for object selection
map global normal v <a-i>
map global normal V <a-a>

# easier access <a-,>
map global normal <minus> <a-,>

# arrow keys for goto mode
map global goto <left>  h -docstring "line begin"
map global goto <right> l -docstring "line end"
map global goto <down>  j -docstring "buffer bottom"
map global goto <up>    k -docstring "buffer top"
map global normal <a-left> <a-h>
map global normal <a-right> <a-l>

# selection undo and jump list keys to arrows
map global normal <c-left>  <a-u> -docstring "undo selection"
map global normal <c-right> <a-U> -docstring "redo selection"
map global normal <c-up>    <c-o> -docstring "jump back"
map global normal <c-down>  <c-i> -docstring "jump forward"

# easier line extensions
map global normal X     '<a-:>Jx'      -docstring "extend lines downwards"
map global normal <a-X> '<a-:><a-;>Kx' -docstring "extend lines upwards"

# highlight search matches
hook global RegisterModified '/' %{ add-highlighter -override global/search regex "%reg{/}" 0:+i }

# comment maps
map global normal <#>   ':comment-line<ret>'  -docstring "comment line"
map global normal <a-#> ':comment-block<ret>' -docstring "comment block"

# find non-ascii chars quickly
define-command non-ascii -docstring "search for non-ascii characters" %{
    set-register slash '[^\x00-\x7f]'
}

# git maps
map global user b     ':git blame<ret>'     -docstring "git blame"
map global user h     ':git next-hunk<ret>' -docstring "git next-hunk"
map global user <a-h> ':git prev-hunk<ret>' -docstring "git prev-hunk"
map global user s     ':git show %sh{git log --format=format:%H -n 1 -- <c-r>%} -- <c-r>%<ret>' -docstring "git show (current buffer)"

# tmux window management commands
define-command -docstring "vsplit [<commands>]: split tmux vertically" \
vsplit -params .. -command-completion %{
    tmux-terminal-horizontal kak -c %val{session} -e "%arg{@}"
}
define-command -docstring "split [<commands>]: split tmux horizontally" \
split -params .. -command-completion %{
    tmux-terminal-vertical kak -c %val{session} -e "%arg{@}"
}
define-command -docstring "tabnew [<commands>]: create new tmux window" \
tabnew -params .. -command-completion %{
    tmux-terminal-window kak -c %val{session} -e "%arg{@}"
}

# repl maps
map global normal <c-t>   ':tmux-repl-vertical<ret>'
map global normal <c-e>   ':tmux-send-selection<ret>'
map global normal <c-a-t> ':tmux-repl-set-pane-by-index<ret>'

# dynamic scrolloff
hook global WinResize .* %{
    evaluate-commands %sh{
        if [ "${kak_hook_param%.*}" -lt 40 ]; then
            printf "set-option window scrolloff 0,10"
        else
            printf "set-option window scrolloff 5,10"
        fi
    }
}

# filetype settings
hook global WinSetOption filetype=(markdown|yaml|javascript|typescript) %{ set-option window indentwidth 2 }

hook global WinSetOption filetype=(sh|kak|python) %{
    hook -group lint window BufWritePost .* %{ try lint }
}

hook global WinSetOption filetype=python %{
    set-option window lintcmd %{ run() {
        pylint --msg-template='{path}:{line}:{column}: {category}: {msg_id}: {msg} ({symbol})' "$1" | awk -F: 'BEGIN { OFS=":" } { if (NF == 6) { $3 += 1; print } }'
        # mypy --show-column-numbers "$1" 2>/dev/null
    } && run }
}

hook global WinSetOption filetype=openscad %{
    set-option window lintcmd %{ run() {
        openscad-linter --only-file "$1" 2>&1 | perl -pe 's/ / error:/'
    } && run }
}

hook global WinSetOption filetype=markdown %{
    set-option window comment_block_begin '<!--'
    set-option window comment_block_end '-->'
    map window normal <c-y> ':tmux-terminal-horizontal glow -pw $(tput cols) $kak_buffile<ret>'
}

# user mode shortcuts
map global user g ':grep ' -docstring "grep"
map global user F ':find ' -docstring "find in buffers"
map global user t ':edit -scratch *tmp*<ret>' -docstring "temp buffer"

define-command find-edit -params 1 -menu -shell-script-candidates %{ fd --type file || rg --files || find . -type f -not -regex '.*/\..*' } 'edit %arg(1)'
map global user f ':find-edit ' -docstring "find and edit file"

map global user n     ':jump-next<ret>'     -docstring "next message"
map global user <a-n> ':jump-previous<ret>' -docstring "previous message"

# add search flags
map global prompt <a-i> '<home>(?i)<end>' -docstring "case insensitive search"
map global prompt <a-s> '<home>(?S)<end>' -docstring "dot doesn't match newline search"

# select all occurrences of selection set
map global normal <a-percent> '*%s<ret>' -docstring "select all occurrences of selection"

## self plugin (autoload) settings
# clipboard.kak: clipboard sync on explicit yank
hook global NormalKey y clipboard-sync

# percent.kak
map global goto p '<esc>:percent<ret>' -docstring "buffer percentage"

# inc-dec.kak
declare-user-mode math
map global math <ret> %{_|xargs -I@ fish -Nc "builtin math '@'"<ret>} -docstring "evaluate selected math expression"
map global math a ':inc-dec %val{count} + 0<ret>' -docstring "increment by count"
map global math x ':inc-dec %val{count} - 0<ret>' -docstring "decrement by count"
map global math A ':inc-dec %val{count} + 1<ret>' -docstring "increment by count times selection index"
map global math X ':inc-dec %val{count} - 1<ret>' -docstring "decrement by count times selection index"
map global normal = ':enter-user-mode math<ret>'       -docstring "enter math mode"
map global user   m ':enter-user-mode -lock math<ret>' -docstring "enter math mode (lock)"

# ts-objects.kak
set-option global tsobj_loose true
hook global KakEnd .* %{ nop %sh{ rm -f "${TMPDIR:-/tmp}/kak.tsobj.*" } }

## remote plugin settings
# kakoune-mysticaltutor
try %{ colorscheme mysticaltutor } catch %{ echo -debug "Error configuring kakoune-mysticaltutor!" }

# kakoune-smooth-scroll
try %{
    set-option global scroll_keys_goto g e . <down>=j <up>=k
    hook global WinCreate [^*].* %{
        hook -once window WinDisplay .* %{
            smooth-scroll-enable
            smooth-scroll-map-key normal <a-percent> '*%s<ret>'
        }
    }
} catch %{ echo -debug "Error configuring kakoune-smooth-scroll!" }
# kakoune-find
# kakoune-registers
# kakoune-shellcheck
# openscad.kak

# enable lsp for filetypes
hook global WinSetOption filetype=(rust|python|c|cpp|javascript|typescript) %{
    try %{ evaluate-commands %sh{ kak-lsp } }

    try %{ set-option buffer lsp_language_id %opt{filetype} }
    set-option window lsp_diagnostic_line_error_sign "!"
    set-option window lsp_diagnostic_line_warning_sign "?"
    set-face window DiagnosticError default+u
    set-face window DiagnosticWarning default+u

    lsp-enable-window
    lsp-diagnostic-lines-disable window
    lsp-inline-diagnostics-disable window
    lsp-auto-signature-help-enable

    # set-option -add buffer lsp_servers %{
    #     [pylsp.settings._.pylsp.plugins.pylsp_mypy]
    #     enabled = true
    # }

    map window user l ':enter-user-mode lsp<ret>' -docstring "LSP mode"
    map window user d ':lsp-diagnostics<ret>' -docstring "LSP diagnostics"
    map window normal <c-h> ':lsp-hover<ret>' -docstring "LSP hover"
    map window insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>' -docstring "Select next snippet placeholder"
}

# ui.kak
try %{
    map global user o ":enter-user-mode ui<ret>" -docstring "toggle UI options"
    set-option global ui_line_numbers_flags -hlcursor
    set-option global ui_whitespaces_flags -tab "»" -lf "↲" -nbsp "␣" -spc "·"
    set-option global ui_wrap_flags -marker "…"
    set-face global TrailingSpace default,red
    hook global WinCreate [^*].* %{
        ui-line-numbers-enable
        ui-matching-enable
        evaluate-commands %sh{
            if [ "$(git -C "$(dirname "$kak_buffile")" rev-parse --git-dir 2>/dev/null)" ]; then
                printf "ui-git-diff-enable\n"
            fi
        }
    }
} catch %{ echo -debug "Error configuring ui.kak!" }

# smarttab.kak
try %{
    require-module smarttab
    set-option global softtabstop 4

    hook global WinSetOption filetype=(c|cpp|python|rust|markdown|kak|lisp|scheme|sh|fish|perl|yaml|javascript|typescript|html|kql) expandtab
    hook global WinSetOption filetype=(markdown|yaml|javascript|typescript|html) %{ set-option window softtabstop 2 }
    hook global WinSetOption filetype=(makefile) noexpandtab
} catch %{ echo -debug "Error configuring smarttab.kak!" }

# kakoune-buffers
try %{
    map global buffers L ':buffer *lint-output*<ret>' -docstring "lint output"
    map global buffers D ':buffer *diagnostics*<ret>' -docstring "diagnostics"
    map global normal <backspace>   ':enter-buffers-mode<ret>'            -docstring "enter buffers mode"
    map global normal <a-backspace> ':enter-user-mode -lock buffers<ret>' -docstring "enter buffers mode (lock)"
    hook global WinDisplay .* info-buffers
} catch %{ echo -debug "Error configuring kakoune-buffers!" }

# kakoune-readline
try %{
    hook global WinCreate .* readline-enable
} catch %{ echo -debug "Error configuring kakoune-readline!" }

# kakoune-mirror
try %{
    map global normal <'> ':enter-user-mode mirror<ret>'
    map global mirror <space> 'a <esc>i <esc>H<a-;>' -docstring "<space>surround<space>"
    map global mirror <backspace> ':execute-keys "<lt>a-:>Z<semicolon>dz<lt>a-;><lt>semicolon>dz"<ret>H'
} catch %{ echo -debug "Error configuring kakoune-mirror!" }

# kakoune-vertical-selection
try %{
    map global normal ^     ':vertical-selection-down<ret>' -docstring "select matching pattern from the lines below"
    map global normal <a-^> ':vertical-selection-up<ret>'   -docstring "select matching pattern from the lines above"
} catch %{ echo -debug "Error configuring kakoune-vertical-selection!" }

# kakoune-expand
try %{
    map global normal <plus> ":expand<ret>"
    set-option -add global expand_commands %{
        expand-impl %{ exec <a-i>p }

        # lower indent level
        # expand-impl %{ exec '<a-:><a-;>k<a-a>i' }

        # expand back to pythonic "...:" lines
        expand-impl %{ exec '<a-i>i<a-:><a-;><a-?>^[^\n]+:<ret><a-;>' }
    }
} catch %{ echo -debug "Error configuring kakoune-expand!" }

# kakoune-state-save
try %{
    hook global KakBegin .* %{
        state-save-reg-load colon
        state-save-reg-load pipe
        state-save-reg-load slash
    }
    hook global KakEnd .* %{
        state-save-reg-save colon
        state-save-reg-save pipe
        state-save-reg-save slash
    }
} catch %{ echo -debug "Error configuring kakoune-state-save!" }

# scrollbar.kak
try %{
    hook global WinResize .* %{
        evaluate-commands %sh{
            if [ "${kak_hook_param%.*}" -lt "$kak_buf_line_count" ]; then
                printf "scrollbar-enable
                # hook window User ScrollStep update-scrollbar
                hook window User ui-hl-changed move-scrollbar-to-left"
            else
                printf "try scrollbar-disable"
            fi
        }
    }
    set-face global Scrollbar rgb:8b5fc7,default
    set-face global ScrollThumb rgb:5c8ec7,rgb:30343c
    set-option global selection_chars " • : ∴ ⠶ ⠷ ⢷ ⢿ ⣿"
} catch %{ echo -debug "Error configuring scrollbar.kak!" }

# kakoune-focus
try %{
    map global user <space> ':ui-wrap-toggle; focus-toggle<ret>' -docstring "toggle focus"
} catch %{ echo -debug "Error configuring kakoune-focus!" }
