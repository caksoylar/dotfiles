# set-option global autoinfo command|onkey|normal
set-option global scrolloff 5,10
set-option global ui_options terminal_assistant=none terminal_synchronized=yes
set-option global tabstop 4
set-option global modelinefmt '{{mode_info}} {magenta}%val{bufname}{default} {{context_info}} {green}%val{client}{default}@{cyan}%val{session}{default} %val{cursor_line}/%val{buf_line_count}:%val{cursor_char_column} (%val{selection_length}) '
set-option global grepcmd 'rg --vimgrep'

# clean selections and search highlight on Esc
map global normal <esc> ',<semicolon>:rmhl global/search<ret>'

# repurpose visual mode keys for object selection
map global normal v <a-i>
map global normal V <a-a>

# easier access <a-,>
map global normal <minus> <a-,>

# arrow keys for goto mode
map global goto <left>  h -docstring "line begin"
map global goto <right> l -docstring "line end"
map global goto <down>  j -docstring "buffer bottom"
map global goto <up>    k -docstring "buffer top"
map global normal <a-left> <a-h>
map global normal <a-right> <a-l>

# selection undo and jump list keys to arrows
map global normal <c-left>  <a-u> -docstring "undo selection"
map global normal <c-right> <a-U> -docstring "redo selection"
map global normal <c-up>    <c-o> -docstring "jump back"
map global normal <c-down>  <c-i> -docstring "jump forward"

# easier line extensions
map global normal X     '<a-:>Jx'      -docstring "extend lines downwards"
map global normal <a-X> '<a-:><a-;>Kx' -docstring "extend lines upwards"

# highlight search matches
hook global RegisterModified '/' %{ add-highlighter -override global/search regex "%reg{/}" 0:+i }

# comment maps
map global normal <#>   ':comment-line<ret>'  -docstring "comment line"
map global normal <a-#> ':comment-block<ret>' -docstring "comment block"

# find non-ascii chars quickly
define-command non-ascii -docstring "search for non-ascii characters" %{
    set-register slash '[^\x00-\x7f]'
}

# tmux window management commands
define-command -docstring "vsplit [<commands>]: split tmux vertically" \
vsplit -params .. -command-completion %{
    tmux-terminal-horizontal kak -c %val{session} -e "%arg{@}"
}
define-command -docstring "split [<commands>]: split tmux horizontally" \
split -params .. -command-completion %{
    tmux-terminal-vertical kak -c %val{session} -e "%arg{@}"
}
define-command -docstring "tabnew [<commands>]: create new tmux window" \
tabnew -params .. -command-completion %{
    tmux-terminal-window kak -c %val{session} -e "%arg{@}"
}

# repl maps
map global normal <c-t>   ':tmux-repl-vertical<ret>'
map global normal <c-e>   ':tmux-send-selection<ret>'
map global normal <c-a-t> ':tmux-repl-set-pane-by-index<ret>'

# lint settings
alias global lint-show-counters nop

hook global WinSetOption filetype=(markdown|yaml) %{ set-option window indentwidth 2 }

hook global WinSetOption filetype=python %{
    set window lintcmd %{ run() {
        pylint --msg-template='{path}:{line}:{column}: {category}: {msg_id}: {msg} ({symbol})' "$1" | awk -F: 'BEGIN { OFS=":" } { if (NF == 6) { $3 += 1; print } }'
    } && run }
}
hook global WinSetOption filetype=(sh|kak|python) %{
    hook -group lint window User BufChange %{ try lint }
}
hook global WinSetOption filetype=openscad %{
    set-option window lintcmd %{ run() {
        openscad-linter --only-file "$1" 2>&1 | perl -pe 's/ / error:/'
    } && run }
}

# user mode shortcuts
map global user g ':grep ' -docstring "grep"
map global user F ':find ' -docstring "find in buffers"

define-command find-edit -params 1 -menu -shell-script-candidates %{ fd --type file || rg --files || find . -type f -not -regex '.*/\..*' } 'edit %arg(1)'
map global user f ':find-edit ' -docstring "find and edit file"

map global user n     ':grep-next-match<ret>'     -docstring "next message"
map global user <a-n> ':grep-previous-match<ret>' -docstring "previous message"

# add search flags
map global prompt <a-i> '<home>(?i)<end>' -docstring "case insensitive search"
map global prompt <a-s> '<home>(?S)<end>' -docstring "dot doesn't match newline search"

# select all occurrences of selection set
map global normal <a-percent> '*%s<ret>' -docstring "select all occurrences of selection"

## self plugin (autoload) settings
# clipboard.kak: clipboard sync on explicit yank
hook global NormalKey y clipboard-sync

# percent.kak
map global goto p '<esc>:percent<ret>' -docstring "buffer percentage"

# inc-dec.kak
declare-user-mode math
map global math <ret> %{_|xargs -I@ fish -Nc "builtin math '@'"<ret>} -docstring "evaluate selected math expression"
map global math a ':inc-dec %val{count} + 0<ret>' -docstring "increment by count"
map global math x ':inc-dec %val{count} - 0<ret>' -docstring "decrement by count"
map global math A ':inc-dec %val{count} + 1<ret>' -docstring "increment by count times selection index"
map global math X ':inc-dec %val{count} - 1<ret>' -docstring "decrement by count times selection index"
map global normal = ':enter-user-mode math<ret>'       -docstring "enter math mode"
map global user   m ':enter-user-mode -lock math<ret>' -docstring "enter math mode (lock)"

hook global WinSetOption filetype=markdown %{
    map window normal <c-y> ':tmux-terminal-horizontal glow -pw $(tput cols) $kak_buffile<ret>'
}

## remote plugin settings
source "%val{config}/bundle/kak-bundle/rc/kak-bundle.kak"
bundle-noload kak-bundle https://git.sr.ht/~jdugan6240/kak-bundle

bundle-noload kakoune-mysticaltutor "https://github.com/caksoylar/kakoune-mysticaltutor" '' %{
    mkdir -p "${kak_config}/colors"
    ln -sf "${kak_opt_bundle_path}/kakoune-mysticaltutor/mysticaltutor.kak" "${kak_config}/colors/"
}
try %{ colorscheme mysticaltutor }

bundle kakoune-smooth-scroll "https://github.com/caksoylar/kakoune-smooth-scroll" %{
    set-option global scroll_keys_goto g e . <down>=j <up>=k
    hook global WinCreate [^*].* %{
        hook -once window WinDisplay .* %{
            smooth-scroll-enable
            smooth-scroll-map-key normal <a-percent> '*%s<ret>'
        }
    }
}
bundle kakoune-find "https://github.com/krobelus/kakoune-find"
bundle kakoune-registers "https://github.com/Delapouite/kakoune-registers"
bundle kakoune-shellcheck "https://gitlab.com/Screwtapello/kakoune-shellcheck"
bundle openscad.kak "https://github.com/caksoylar/openscad.kak"

# enable lsp for filetypes, kak-lsp not managed by bundle
hook global WinSetOption filetype=(rust|python|c|cpp) %{
    try %{
        evaluate-commands %sh{ kak-lsp --kakoune -s "$kak_session" }
    }

    set-option window lsp_diagnostic_line_error_sign "!"
    set-option window lsp_diagnostic_line_warning_sign "?"
    set-face window DiagnosticError default+u
    set-face window DiagnosticWarning default+u
    set-option global lsp_server_configuration pyls.plugins.pyls_mypy.enabled=true

    lsp-enable-window
    lsp-diagnostic-lines-disable window
    lsp-inline-diagnostics-disable window

    map window user l ':enter-user-mode lsp<ret>' -docstring "LSP mode"
    map window user d ':lsp-diagnostics<ret>' -docstring "LSP diagnostics"
    map window normal <c-h> ':lsp-hover<ret>' -docstring "LSP hover"
}

bundle ui.kak "https://github.com/kkga/ui.kak" %{
    map global user o ":enter-user-mode ui<ret>" -docstring "toggle UI options"
    set-option global ui_line_numbers_flags -hlcursor -relative
    set-option global ui_whitespaces_flags -tab "»" -lf "↲" -nbsp "␣" -spc "·"
    set-option global ui_wrap_flags -marker "…"
    set-face global TrailingSpace default,red
    hook global WinCreate [^*].* %{
        ui-line-numbers-enable
        # ui-wrap-enable
        ui-matching-enable
        evaluate-commands %sh{
            if [ "$(git -C "$(dirname "$kak_buffile")" rev-parse --git-dir 2>/dev/null)" ]; then
                printf "ui-git-diff-enable\n"
            fi
        }
    }
}

bundle smarttab.kak "https://github.com/andreyorst/smarttab.kak" %{
    require-module smarttab
    set-option global softtabstop 4

    hook global WinSetOption filetype=(c|cpp|python|rust|markdown|kak|lisp|scheme|sh|fish|perl|yaml) expandtab
    hook global WinSetOption filetype=(makefile) noexpandtab
}

bundle kakoune-buffers "https://github.com/Delapouite/kakoune-buffers" %{
    map global buffers L ':buffer *lint-output*<ret>' -docstring "lint output"
    map global buffers D ':buffer *diagnostics*<ret>' -docstring "diagnostics"
    map global normal <backspace>   ':enter-buffers-mode<ret>'            -docstring "enter buffers mode"
    map global normal <a-backspace> ':enter-user-mode -lock buffers<ret>' -docstring "enter buffers mode (lock)"
    hook global WinDisplay .* info-buffers
}

bundle kakoune-readline "https://github.com/chambln/kakoune-readline" %{
    hook global WinCreate .* readline-enable
}

bundle kakoune-mirror 'https://github.com/Delapouite/kakoune-mirror' %{
    map global normal "'" ':enter-user-mode mirror<ret>'
    map global mirror <space> 'a <esc>i <esc>H<a-;>' -docstring "<space>surround<space>"
    map global mirror <backspace> ':execute-keys "<lt>a-:>Z<semicolon>dz<lt>a-;><lt>semicolon>dz"<ret>H'
}

bundle-customload kakoune-vertical-selection "https://github.com/occivink/kakoune-vertical-selection" %{
    source "%opt{bundle_path}/kakoune-vertical-selection/vertical-selection.kak"

    map global normal ^     ':vertical-selection-down<ret>' -docstring "select matching pattern from the lines below"
    map global normal <a-^> ':vertical-selection-up<ret>'   -docstring "select matching pattern from the lines above"
}

bundle-customload kakoune-expand "https://github.com/occivink/kakoune-expand" %{
    source "%opt{bundle_path}/kakoune-expand/expand.kak"

    map global normal <plus> ":expand<ret>"
    set-option -add global expand_commands %{
        expand-impl %{ exec <a-i>p }

        # lower indent level
        # expand-impl %{ exec '<a-:><a-;>k<a-a>i' }

        # expand back to pythonic "...:" lines
        expand-impl %{ exec '<a-i>i<a-:><a-;><a-?>^[^\n]+:<ret><a-;>' }
    }
}

bundle kakoune-state-save "https://gitlab.com/Screwtapello/kakoune-state-save" %{
    hook global KakBegin .* %{
        state-save-reg-load colon
        state-save-reg-load pipe
        state-save-reg-load slash
    }
    hook global KakEnd .* %{
        state-save-reg-save colon
        state-save-reg-save pipe
        state-save-reg-save slash
    }
}

bundle scrollbar.kak "git clone -b my-cool-rewrite https://github.com/Screwtapello/scrollbar.kak --single-branch --no-tags" %{
    hook global WinResize .* %{
        evaluate-commands %sh{
            if [ "${kak_hook_param%.*}" -lt "$kak_buf_line_count" ]; then
                printf "scrollbar-enable
                # hook window User ScrollStep update-scrollbar
                hook window User ui-hl-changed move-scrollbar-to-left"
            else
                printf "scrollbar-disable"
            fi
        }
    }
    set-face global Scrollbar rgb:8b5fc7,default
    set-face global ScrollThumb rgb:5c8ec7,rgb:30343c
    set-option global selection_chars " • : ∴ ⠶ ⠷ ⢷ ⢿ ⣿"
}

bundle kakoune-focus "https://github.com/caksoylar/kakoune-focus" %{
    map global user <space> ':ui-wrap-toggle; focus-toggle<ret>' -docstring "toggle focus"
}
